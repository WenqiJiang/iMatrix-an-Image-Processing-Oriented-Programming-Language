type token =
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | SEMI
  | COMMA
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULO
  | POWER
  | SELFPLUS
  | SELFMINUS
  | MATMUL
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | NOT
  | IF
  | ELSE
  | FOR
  | WHILE
  | BREAK
  | CONTINUE
  | RETURN
  | INT
  | BOOL
  | FLOAT
  | CHAR
  | STRING
  | MAT
  | IMG
  | VOID
  | STRUCT
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | STRING_LITERAL of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "microcparse.mly"
open Ast
# 58 "microcparse.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACK *);
  260 (* RBRACK *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* SEMI *);
  264 (* COMMA *);
  265 (* DOT *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* MODULO *);
  271 (* POWER *);
  272 (* SELFPLUS *);
  273 (* SELFMINUS *);
  274 (* MATMUL *);
  275 (* ASSIGN *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* AND *);
  283 (* OR *);
  284 (* NOT *);
  285 (* IF *);
  286 (* ELSE *);
  287 (* FOR *);
  288 (* WHILE *);
  289 (* BREAK *);
  290 (* CONTINUE *);
  291 (* RETURN *);
  292 (* INT *);
  293 (* BOOL *);
  294 (* FLOAT *);
  295 (* CHAR *);
  296 (* STRING *);
  297 (* MAT *);
  298 (* IMG *);
  299 (* VOID *);
  300 (* STRUCT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* LITERAL *);
  302 (* BLIT *);
  303 (* ID *);
  304 (* FLIT *);
  305 (* STRING_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\007\000\007\000\003\000\
\008\000\008\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\012\000\012\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\013\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\000\000\002\000\003\000\
\000\000\002\000\002\000\003\000\003\000\005\000\007\000\009\000\
\005\000\000\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\003\000\
\004\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\055\000\000\000\010\000\011\000\012\000\013\000\
\001\000\003\000\004\000\000\000\000\000\000\000\016\000\000\000\
\000\000\000\000\008\000\000\000\000\000\014\000\000\000\000\000\
\009\000\015\000\000\000\000\000\000\000\000\000\017\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\030\000\
\000\000\029\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\021\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\023\000\000\000\000\000\024\000"

let yydgoto = "\002\000\
\003\000\004\000\010\000\011\000\012\000\017\000\024\000\028\000\
\018\000\043\000\044\000\053\000\078\000\079\000"

let yysindex = "\009\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\220\254\008\255\077\255\000\000\221\254\
\047\255\057\255\000\000\067\255\077\255\000\000\029\255\077\255\
\000\000\000\000\037\255\042\255\093\255\139\255\000\000\000\000\
\139\255\139\255\100\255\101\255\104\255\139\255\000\000\000\000\
\025\255\000\000\000\000\039\001\090\000\050\255\091\255\091\255\
\139\255\139\255\139\255\078\001\103\255\139\255\139\255\000\000\
\139\255\139\255\139\255\139\255\139\255\139\255\139\255\139\255\
\139\255\139\255\139\255\139\255\139\255\139\255\000\000\000\000\
\116\000\109\255\142\000\000\000\078\001\116\255\111\255\078\001\
\079\255\079\255\091\255\091\255\091\255\078\001\084\000\084\000\
\158\255\158\255\158\255\158\255\113\001\096\001\131\255\139\255\
\131\255\000\000\139\255\092\255\060\001\000\000\078\001\131\255\
\139\255\000\000\119\255\131\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\121\255\000\000\000\000\
\000\000\122\255\000\000\000\000\000\000\000\000\000\000\098\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\118\255\000\000\000\000\
\181\255\000\000\000\000\000\000\000\000\000\000\207\255\233\255\
\000\000\118\255\000\000\043\255\000\000\126\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\255\000\000\129\255\052\255\
\168\000\194\000\003\000\038\000\064\000\060\255\016\001\018\001\
\204\000\230\000\238\000\008\001\015\255\056\255\000\000\000\000\
\000\000\000\000\000\000\106\255\000\000\000\000\078\255\000\000\
\137\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\123\000\000\000\248\255\000\000\000\000\077\000\
\000\000\166\255\226\255\208\255\000\000\000\000"

let yytablesize = 650
let yytable = "\045\000\
\009\000\074\000\047\000\048\000\100\000\016\000\102\000\052\000\
\014\000\001\000\013\000\019\000\023\000\106\000\015\000\027\000\
\044\000\109\000\073\000\052\000\075\000\044\000\044\000\077\000\
\080\000\054\000\081\000\082\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\044\000\044\000\030\000\055\000\027\000\053\000\031\000\032\000\
\020\000\027\000\030\000\053\000\033\000\048\000\031\000\072\000\
\107\000\045\000\048\000\048\000\033\000\037\000\045\000\045\000\
\021\000\101\000\037\000\037\000\103\000\034\000\035\000\022\000\
\036\000\037\000\052\000\025\000\038\000\034\000\035\000\054\000\
\036\000\037\000\045\000\029\000\038\000\054\000\039\000\040\000\
\041\000\042\000\059\000\060\000\061\000\062\000\039\000\040\000\
\041\000\042\000\017\000\015\000\049\000\050\000\017\000\017\000\
\051\000\062\000\022\000\046\000\017\000\076\000\022\000\022\000\
\005\000\006\000\007\000\096\000\022\000\098\000\099\000\008\000\
\108\000\104\000\006\000\007\000\026\000\017\000\017\000\051\000\
\017\000\017\000\052\000\030\000\017\000\022\000\022\000\031\000\
\022\000\022\000\026\000\030\000\022\000\033\000\017\000\017\000\
\017\000\017\000\026\000\000\000\000\000\033\000\022\000\022\000\
\022\000\022\000\000\000\000\000\000\000\000\000\034\000\035\000\
\000\000\036\000\037\000\000\000\000\000\038\000\034\000\057\000\
\058\000\059\000\060\000\061\000\062\000\000\000\000\000\039\000\
\040\000\041\000\042\000\000\000\000\000\000\000\031\000\039\000\
\040\000\041\000\042\000\031\000\031\000\000\000\031\000\031\000\
\031\000\031\000\031\000\031\000\000\000\000\000\000\000\000\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\046\000\000\000\000\000\000\000\000\000\046\000\046\000\000\000\
\046\000\046\000\046\000\046\000\046\000\000\000\000\000\000\000\
\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\047\000\000\000\000\000\000\000\000\000\047\000\
\047\000\000\000\047\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\000\000\000\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\034\000\000\000\000\000\000\000\
\000\000\034\000\034\000\000\000\034\000\034\000\034\000\034\000\
\034\000\000\000\000\000\000\000\000\000\000\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\006\000\007\000\035\000\
\000\000\000\000\000\000\008\000\035\000\035\000\000\000\035\000\
\035\000\035\000\035\000\035\000\000\000\000\000\000\000\000\000\
\000\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\036\000\000\000\000\000\000\000\000\000\036\000\036\000\
\000\000\036\000\036\000\036\000\036\000\036\000\000\000\000\000\
\000\000\000\000\000\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\071\000\000\000\057\000\058\000\059\000\
\060\000\061\000\062\000\057\000\058\000\059\000\060\000\061\000\
\062\000\065\000\066\000\067\000\068\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\095\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\000\058\000\059\000\
\060\000\061\000\062\000\000\000\000\000\000\000\000\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\097\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\
\058\000\059\000\060\000\061\000\062\000\000\000\000\000\000\000\
\000\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\032\000\000\000\000\000\000\000\000\000\032\000\032\000\
\000\000\032\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\033\000\000\000\000\000\000\000\000\000\
\033\000\033\000\000\000\033\000\033\000\040\000\000\000\000\000\
\000\000\000\000\040\000\040\000\000\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\000\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\041\000\
\000\000\000\000\000\000\000\000\041\000\041\000\000\000\042\000\
\000\000\000\000\000\000\000\000\042\000\042\000\000\000\000\000\
\000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\043\000\000\000\000\000\000\000\000\000\043\000\043\000\
\000\000\038\000\000\000\039\000\000\000\000\000\038\000\038\000\
\039\000\039\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\038\000\038\000\039\000\039\000\000\000\
\000\000\038\000\038\000\039\000\039\000\056\000\000\000\000\000\
\057\000\058\000\059\000\060\000\061\000\062\000\000\000\000\000\
\000\000\000\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\105\000\000\000\000\000\057\000\058\000\059\000\
\060\000\061\000\062\000\000\000\000\000\000\000\000\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\057\000\
\058\000\059\000\060\000\061\000\062\000\000\000\000\000\000\000\
\000\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\057\000\058\000\059\000\060\000\061\000\062\000\000\000\
\000\000\000\000\000\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\057\000\058\000\059\000\060\000\061\000\062\000\
\000\000\000\000\000\000\000\000\063\000\064\000\065\000\066\000\
\067\000\068\000"

let yycheck = "\030\000\
\000\000\050\000\033\000\034\000\095\000\014\000\097\000\038\000\
\001\001\001\000\047\001\047\001\021\000\104\000\007\001\024\000\
\002\001\108\000\049\000\050\000\051\000\007\001\008\001\054\000\
\055\000\001\001\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\026\001\027\001\001\001\019\001\002\001\002\001\005\001\006\001\
\002\001\007\001\001\001\008\001\011\001\002\001\005\001\006\001\
\105\000\002\001\007\001\008\001\011\001\002\001\007\001\008\001\
\008\001\096\000\007\001\008\001\099\000\028\001\029\001\005\001\
\031\001\032\001\105\000\047\001\035\001\028\001\029\001\002\001\
\031\001\032\001\027\001\047\001\035\001\008\001\045\001\046\001\
\047\001\048\001\012\001\013\001\014\001\015\001\045\001\046\001\
\047\001\048\001\001\001\007\001\001\001\001\001\005\001\006\001\
\001\001\015\001\001\001\031\000\011\001\007\001\005\001\006\001\
\036\001\037\001\038\001\007\001\011\001\002\001\008\001\043\001\
\002\001\030\001\002\001\002\001\007\001\028\001\029\001\002\001\
\031\001\032\001\002\001\001\001\035\001\028\001\029\001\005\001\
\031\001\032\001\002\001\001\001\035\001\011\001\045\001\046\001\
\047\001\048\001\024\000\255\255\255\255\011\001\045\001\046\001\
\047\001\048\001\255\255\255\255\255\255\255\255\028\001\029\001\
\255\255\031\001\032\001\255\255\255\255\035\001\028\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\045\001\
\046\001\047\001\048\001\255\255\255\255\255\255\002\001\045\001\
\046\001\047\001\048\001\007\001\008\001\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\002\001\255\255\255\255\255\255\255\255\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\002\001\255\255\255\255\255\255\255\255\007\001\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\002\001\255\255\255\255\255\255\
\255\255\007\001\008\001\255\255\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\002\001\
\255\255\255\255\255\255\043\001\007\001\008\001\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\002\001\255\255\255\255\255\255\255\255\007\001\008\001\
\255\255\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\002\001\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\010\001\011\001\012\001\013\001\014\001\
\015\001\022\001\023\001\024\001\025\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\002\001\255\255\255\255\255\255\255\255\007\001\008\001\
\255\255\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\002\001\255\255\255\255\255\255\255\255\
\007\001\008\001\255\255\010\001\011\001\002\001\255\255\255\255\
\255\255\255\255\007\001\008\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\255\255\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\002\001\255\255\255\255\255\255\255\255\007\001\008\001\
\255\255\002\001\255\255\002\001\255\255\255\255\007\001\008\001\
\007\001\008\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\020\001\021\001\020\001\021\001\255\255\
\255\255\026\001\027\001\026\001\027\001\007\001\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\007\001\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  SEMI\000\
  COMMA\000\
  DOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULO\000\
  POWER\000\
  SELFPLUS\000\
  SELFMINUS\000\
  MATMUL\000\
  ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  RETURN\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  CHAR\000\
  STRING\000\
  MAT\000\
  IMG\000\
  VOID\000\
  STRUCT\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  STRING_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 38 "microcparse.mly"
            ( _1 )
# 421 "microcparse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "microcparse.mly"
                 ( ([], [])               )
# 427 "microcparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 42 "microcparse.mly"
               ( ((_2 :: fst _1), snd _1) )
# 435 "microcparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 43 "microcparse.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 443 "microcparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 47 "microcparse.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = List.rev _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 458 "microcparse.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "microcparse.mly"
                  ( [] )
# 464 "microcparse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 55 "microcparse.mly"
                  ( _1 )
# 471 "microcparse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "microcparse.mly"
                             ( [(_1,_2)]     )
# 479 "microcparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 59 "microcparse.mly"
                             ( (_3,_4) :: _1 )
# 488 "microcparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "microcparse.mly"
          ( Int   )
# 494 "microcparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "microcparse.mly"
          ( Bool  )
# 500 "microcparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "microcparse.mly"
          ( Float )
# 506 "microcparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "microcparse.mly"
          ( Void  )
# 512 "microcparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "microcparse.mly"
                     ( [] )
# 518 "microcparse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 69 "microcparse.mly"
                     ( _2 :: _1 )
# 526 "microcparse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 72 "microcparse.mly"
               ( (_1, _2) )
# 534 "microcparse.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "microcparse.mly"
                   ( [] )
# 540 "microcparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 76 "microcparse.mly"
                   ( _2 :: _1 )
# 548 "microcparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "microcparse.mly"
                                            ( Expr _1               )
# 555 "microcparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 80 "microcparse.mly"
                                            ( Return _2             )
# 562 "microcparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 81 "microcparse.mly"
                                            ( Block(List.rev _2)    )
# 569 "microcparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "microcparse.mly"
                                            ( If(_3, _5, Block([])) )
# 577 "microcparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 83 "microcparse.mly"
                                            ( If(_3, _5, _7)        )
# 586 "microcparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "microcparse.mly"
                                            ( For(_3, _5, _7, _9)   )
# 596 "microcparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 86 "microcparse.mly"
                                            ( While(_3, _5)         )
# 604 "microcparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "microcparse.mly"
                  ( Noexpr )
# 610 "microcparse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "microcparse.mly"
                  ( _1 )
# 617 "microcparse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 93 "microcparse.mly"
                     ( Literal(_1)            )
# 624 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "microcparse.mly"
              ( Fliteral(_1)           )
# 631 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 95 "microcparse.mly"
                     ( BoolLit(_1)            )
# 638 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "microcparse.mly"
                     ( Id(_1)                 )
# 645 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "microcparse.mly"
                     ( Binop(_1, Add,   _3)   )
# 653 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "microcparse.mly"
                     ( Binop(_1, Sub,   _3)   )
# 661 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "microcparse.mly"
                     ( Binop(_1, Mult,  _3)   )
# 669 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "microcparse.mly"
                     ( Binop(_1, Div,   _3)   )
# 677 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "microcparse.mly"
                        ( Binop(_1, Mod,   _3)   )
# 685 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "microcparse.mly"
                       ( Binop(_1, Pow,   _3)   )
# 693 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "microcparse.mly"
                     ( Binop(_1, Equal, _3)   )
# 701 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "microcparse.mly"
                     ( Binop(_1, Neq,   _3)   )
# 709 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "microcparse.mly"
                     ( Binop(_1, Less,  _3)   )
# 717 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "microcparse.mly"
                     ( Binop(_1, Leq,   _3)   )
# 725 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "microcparse.mly"
                     ( Binop(_1, Greater, _3) )
# 733 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "microcparse.mly"
                     ( Binop(_1, Geq,   _3)   )
# 741 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "microcparse.mly"
                     ( Binop(_1, And,   _3)   )
# 749 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "microcparse.mly"
                     ( Binop(_1, Or,    _3)   )
# 757 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "microcparse.mly"
                         ( Unop(Neg, _2)      )
# 764 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "microcparse.mly"
                     ( Unop(Not, _2)          )
# 771 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "microcparse.mly"
                     ( Assign(_1, _3)         )
# 779 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 116 "microcparse.mly"
                              ( Call(_1, _3)  )
# 787 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 117 "microcparse.mly"
                       ( _2                   )
# 794 "microcparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "microcparse.mly"
                  ( [] )
# 800 "microcparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 121 "microcparse.mly"
               ( List.rev _1 )
# 807 "microcparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "microcparse.mly"
                            ( [_1] )
# 814 "microcparse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "microcparse.mly"
                         ( _3 :: _1 )
# 822 "microcparse.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
